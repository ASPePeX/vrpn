2002-08-15  David Borland <borland@cs.unc.edu>

        * vrpn_Analog.[Ch] : added functions for sending requests to 
        change a range of channels at once.

        * vrpn_Poser_Analog.[Ch] : created new vrpn_Poser_Analog class that is
        used when we wish to "pose" an analog device.  Still in testing 
        phase.

        * vrpn_Poser.[Ch] : moved some code from here to vrpn_Poser_Analog

2002-08-14  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_DirectXFFJoystick.C : Changed the way the lateral force is
		computed to be the slope rather than the component of the
		normal vector pointing in that direction.  Clip forces in
		a way that preserves direction.

2002-08-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_DirectXFFJoystick.h : Added force feedback.
	* vrpn_DirectXFFJoystick.C : Added force feedback.

2002-08-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn.dsp : Add in definition of VRPN_USE_DIRECTINPUT to enable the
		compilation of force-feedback joystick code under DirectX (this
		first implementation doesn't use force feedback, just reads from
		the joystick).  Remove this definition from VRPN and from
		vrpn_server to compile without the DirectX 8.0 SDK.
	* vrpn_DirectXFFJoystick.h : Driver for Force Feedback joystick.
	* vrpn_DirectXFFJoystick.C : Driver for Force Feedback joystick.

2002-08-12 David Borland <borland@cs.unc.edu>

        * vrpn_Poser.[Ch] : Incorporating an Analog Device into the Poser
        class.  Not finished, but want to do some tests.

2002-08-02 David Borland <borland@cs.unc.edu>

        * vrpn_Poser.[Ch] : files for the new Poser class.  A Poser
        is basically the inverse of a Tracker.  It takes pose requests for
        a device and will (eventually) drive the device to the given pose.
        Right now, we can give pose and velocity requests on the client 
        side and recieve them on the server side.  Just performing this 
        commit for some testing purposes.

2002-07-19  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Serial.C (vrpn_drain_output_buffer) : Changed return value to
		match what it was supposed to be.

2002-07-10  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_UNC_Joystick.C : Changed memcpy() to normal assignment
		to avoid segfault.

2002-07-09  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Serial.C (vrpn_open_commport) : Sets the DTR line to be
		on while the port is open.  Windows XP turns this off.
		The TNG3 uses this line for power, so goes dead when
		opened on XP unless this is done.
	* vrpn_Serial.C (read_available_characters) : The timeout was
		coded incorrectly so that it waited zero time when
		passed a NULL pointer to the timeout; it should wait
		an infinite time in this case.  Pass it a structure
		with zeroes to get a zero timeout (or use the other
		function of the same name).
	* vrpn_Serial.C (vrpn_flush_output_buffer) : The flush and drain
		routines were backwards for Windows.  Flush now throws
		out the characters and drain waits for them to get out
		the port.
	* vrpn_Serial.C (vrpn_drain_output_buffer) : The flush and drain
		routines were backwards for Windows.  Flush now throws
		out the characters and drain waits for them to get out
		the port.
	* vrpn_Tng3.h : Made timeout named _timeout to show that it is
		a member variable.
	* vrpn_Tng3.C : Made timout named _timeout to match header.
		Changed error message to say "TNG3" rather than
		"Cerealbox" (cut-and-paste error).

2002-07-09  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Connection.C : Reordered functions (for HP build).
	* vrpn_Shared.h : Hack to get bools to work on old HP compiler.

2002-07-08  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_FileConnection.C : Include needed for Linux.

2002-07-08  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Clock.h : Cosmetic changes.
	* vrpn_Connection.C : Adds hostname to error messages.
		Only reports broken connection message once/second.
	* vrpn_FileConnection.C : Comment changes.  Only print out
		error messages once per second.
	* vrpn_Tracker.h : Changed array sizes to use the defined
		constant meant for that purpose.

2002-06-24  David Marshburn  <marshbur@cs.unc.edu>

	* vrpn_ForceDevice.[h,C]:  constructors now take the name of
	the connection as a const char* argument.

2002-06-17  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Button.C : Fixing "for (int i = 0;" initialization.

2002-05-17  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Tng3.C : Cosmetic + fixing infinite-loop bug by turning it from
			hanging waiting for characters to polling for any
			available characters.
	* vrpn_Tng3.h : Same.

2002-05-16  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Tracker_isense.C : Code to interface to Intersense trackers
		using their library.  By default, it is not built (requires
		proprietary library) but instead prints an error message.
	* vrpn_Tracker_isense.h : Same.
	* Makefile : Added Zaber and Isense drivers to the server library.
	* vrpn.dsp : Added Zaber and Isense drivers to the server library.

2002-05-07  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Zaber.C : Code to handle report types 20 and 255.  Added code
		to tell the
		remote device its values upon initial connection.  Code to
		tell it to start off more slowly and have a smaller maximum
		speed (to help with torque).  Fixed timeout code so that it
		will reset correctly if devices are unplugged and replugged.
	* vrpn_Zaber.h : Code to tell the remote device its values upon
		initial connection

2002-05-03  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Analog.C : Added capability to send requests from an analog
		remote to an analog server for it to change a channel to the
		requested value.  Modified the example server to respond by
		setting its channels to this.  This is done to enable the
		Zaber linear actuator to be moved to requested positions.
	* vrpn_Analog.h : Same.
	* vrpn_Zaber.h : Code to control a Zaber linear actuator.
	* vrpn_Zaber.C : Code to control a Zaber linear actuator.
	* vrpn.dsw : Added vrpn_Zaber.[hC] to compile code for Windows.
		It should work for any architecture.

2002-04-16  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Dial.C (vrpn_Dial_Remote::mainloop) : Calls client_mainloop()

2002-03-20  Aron Helser  <helser@cs.unc.edu>

	* time_test.dsp : Moved here so it is next to the code it
	compiles. Standardized settings, see below.
	* vrpn.dsp : standardized settings, see below. 
	* vrpn.dsw : Changed location of many dsp files, and made
	standardized settings for all Debug and Release
	builds. VRPN_NO_STREAMS defined by default. All object files and
	compiler-generated files go in vrpn/pc_win32 directory, in a
	subdirectory that matches the source directory or executable
	name. 

2002-03-18  David Marshburn  <marshbur@cs.unc.edu>

	* vrpn_Button.C (read): change in Python's read method to allow
	compilation on the SGI.

2002-03-15  Aron Helser  <helser@cs.unc.edu>

	* *.dsp: Added VRPN_COMPILE_DEF environment variable to
	preprocessor definitions of all projects. Allows nano to define
	VRPN_NO_STREAMS from the environment, as needed. 

2002-03-15  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Button.C (read): Sets the debounce on the Python to check
		over 30 reads rather than just 3, also makes the code
		general so that you change one constant and it checks
		that number of readings.  This is to make the foot pedal
		for the 3DFM not bounce.

2002-03-13  Aron Helser  <helser@cs.unc.edu>

	* vrpn_Connection.C (setControlMsgTimeOffset): new method to
	assist writing a stream file with artibrary time stamps inside. 
	(d_controlMsgTimeOffset): new, same. 
	(drop_connection): Use d_controlMsgTimeOffset
	* vrpn_Spaceball.C: compiler warning fix.
	
2002-02-01  David Marshburn  <marshbur@cs.unc.edu>

	* vrpn.dsp:  added vrpn_LamportClock.[C,h]

2002-01-28  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Spaceball.C : Code to drive Spaceballs (from John Stone).
	* vrpn_Spaceball.h : Code to drive Spaceballs (from John Stone).
	* Makefile : Include files needed to drive Spaceballs (from John Stone).
	* vrpn.dsp : Include files needed to drive Spaceballs (from John Stone).

2002-01-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Tracker.C : Adding vrpn_Tracker_Server (utility class for apps)
	* vrpn_Tracker.h : Adding vrpn_Tracker_Server (utility class for apps)

2002-01-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Wande.C : Changing istream messages into stdio messages
		so that it can compile without the streams library.

2002-01-03  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_3Space.C (vrpn_Tracker_3Space::get_report) : Decodes the
		orientation bytes correctly for all orientations.  Fixes
		a bug.  This code is still too specific, it looks like it
		will only work on machines with the same byte order as
		PCs, and with machines that allow unaligned access.

2002-01-03  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Button.C (vrpn_Button_SerialMouse::read) : Checks more
		carefully for unwanted characters.  More comments to
		describe what is happening.

2002-01-03  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Tracker_Fastrak.C (reset) : Some IS900 trackers report
		a status message with only 54 bytes, rather than the 55 bytes
		for a Fastrak.  This code is generalized to handle both.

2002-01-02  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Tracker_Fastrak.C (get_report) : Added a call to report
		the changes in IS900 analogs.  The semantics of mainloop()
		on the analog server had changed so that it no longer calls
		report() each time through, and this change had not been
		filtered into the servers that relied on it calling
		report().  Since sometimes you want report(), and sometimes
		you want report_changes(), and sometimes you want neither,
		this is more general.

2001-12-28  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Button.C (client_msg_handler) : Made the parsing of the admin
		message match the encoding of it, so that filtered buttons
		will respond to requests to set buttons toggle/momentary.
		This fixes a bug.

2001-12-10  David Marshburn  <marshbur@cs.unc.edu>

	* vrpn_Connection.C (vrpn_Log::open):  added some more diagnostic
	output when this fails to open a log file.

2001-11-10  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* time_test.cpp : Program to compare two ways of reading time on Windows.
	* vrpn.dsw : Added project file to compile time_test application.
	* vrpn_Analog.C : Modify to compile under Windows CE development environment.
	* vrpn_BaseClass.C : Modify to compile under Windows CE development environment.
	* vrpn_BaseClass.h : Modify to compile under Windows CE development environment.
	* vrpn_Button.C : Modify to compile under Windows CE development environment.
	* vrpn_Button.h : Modify to compile under Windows CE development environment.
	* vrpn_Clock.C : Modify to compile under Windows CE development environment.
	* vrpn_Connection.C : Modify to compile under Windows CE development environment.
	* vrpn_FileConnection.C : Modify to compile under Windows CE development environment.
	* vrpn_Serial.C : Modify to compile under Windows CE development environment.
	* vrpn_Shared.C : Modify to compile under Windows CE development environment.
	* vrpn_Shared.h : Modify to compile under Windows CE development environment.
		Note that VRPN_NO_STREAMS is defined whenever Windows CE is being
		used (they don't have I/O streams!)  This same definition can be used
		at any time to build a VRPN library that uses FILE * rather than streams.
	* vrpn_Tracker.C : Modify to compile under Windows CE development environment.
	* vrpn_Tracker.h : Modify to compile under Windows CE development environment.
	* vrpn_embedded : Directory containing workspace and project files to build
		VRPN library under Windows CE.  I can't get the application to build,
		but am checking this in so that it will start to track other changes.

2001-11-08  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Analog_5dt.C (vrpn_5dt::get_report) :
		Changed it to expect 10 characters per report, since
		that is what they are getting in France (they are the
		only group that has the glove, and they wrote the
		driver, so I does what they sez.

2001-11-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Connection.C (vrpn_TranslationTable::addRemoteEntry) :
		The check put in below causes the system to fail when
		reading from tracker log files.  This is scary, but I'm
		taking the check back out until I can debug this
		properly.

2001-11-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Connection.C (vrpn_TranslationTable::addRemoteEntry) :
		Check added to see if there is already an entry in the
		table.  If so, error printed and returned.

2001-10-23  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_SharedObject.C (vrpn_Shared_String::set): fixed some bad
	logic here that was causing a memory bug - was comparing strings 
	by comparing the pointers for those strings despite the fact that
	string values were being put into newly allocated arrays

2001-09-07  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn.dsw : Adds a DAQ driver server for the UNC 3D Force Microscope
	* vrpn_Types.h : Comment clarification

2001-08-10  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn.dsw : Makes all libraries in Phantom server use same style
	* vrpn_Connection.C (vrpn_Endpoint::send_pending_messages) :
		Better handling of this check to avoid problems.

2001-08-07  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn.dsw : Added vrpn_print_devices project file
	* vrpn_Connection.C (vrpn_Endpoint::send_pending_messages) :
		Check for valid connection before doing anything

2001-07-30  David Marshburn  <marshbur@cs.unc.edu>

	* server_src\vrpn_phantom.dsp:  changed the include directories
	to ghost3.1 and ghost-stl.

2001-07-29  Tom Hudson  <hudson@cs.unc.edu>

        * vrpn_Connection.C (vrpn_Endpoint::drop_connection) :
        Fix parentheses on d_connectionCounter reference.
        (vrpn_Endpoint::finish_new_connection) : Same.

        * vrpn_Connection.C (vrpn_Synchronized_Connection::mainloop) :
        Partially fix logic for calling clock server/remote.

        * vrpn_Mutex.C (vrpn_Mutex_Remote::requestIndex) : Add verbose
        debugging printfs.
        (vrpn_Mutex_Remote::request) : Same.
        (vrpn_Mutex_Remote::release) : Same.
        (vrpn_Mutex_Remote::handle_initialize) : Same.

2001-07-25  Tom Hudson  <hudson@cs.unc.edu>

	* vrpn_Log.h : New file.
	* vrpn_Connection.C (vrpn_Log declaration) : Moved to new file.

	* vrpn_File_Connection.C (play_to_user_message) : Log "incoming"
	messages.
	(playone_to_filetime) : Same.
	(read_cookie) : Log cookie.

2001-07-03  David Marshburn  <marshbur@tungsten-cs.cs.unc.edu>

	* vrpn_Shared.h, C: added vrpn_TimevalEqual

	* vrpn_SharedObject.C: 
	(shouldAcceptUpdate) changed the logic of shouldAcceptUpdate
	in regard to timing.  Changes were formerly ignored if the 
	timestamp of the update was <= the time of the last update.
	Due to poor time resolution, the "=" part of this comparison
	is a bug.  Now, we only reject an update if the time of the
	current and last updates are equal, and we are not the
	serializer, and the update is of a local source.  
	(vrpn_SharedObject) made d_isSerializer initialized to vrpn_TRUE,
	so shared object will by default accept changes having equal
	timestamps.
	(vrpn_Shared_int32::shouldAcceptUpdate)  removed test of
	Lamport clock, so that we only ever test the standard timevals.  
	The implementation of vrpn_LamportClock is incomplete.
	(useLamportClock) disabled so that Lamport clocks can't be
	accidentally turned on.
	- Also removed a bunch of commented-out print statements.
	
2001-06-29  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Flock_Parallel.h : Spoof Master ID directly, removed un-needed
		re-registry of IDs by using inherited function to send the
		tracker reports.  The previous version was sending messages
		with bogus ID because of recent refactoring of the Serial
		Tracker classes.
	* vrpn_Flock_Parallel.C : Same.

2001-06-29  Russell M. Taylor II  <taylorr@cs.unc.edu>

        * vrpn_Serial.C : Removed dynamic allocation of comm handles,
            which was causing seg faults.
	* vrpn_Tracker.C : Added check for negative sensor number in callback
		handler (this happened when connected to a malfunctioning
		tracker server).

2001-06-27  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_Connection.C (vrpn_Endpoint::drop_connection): removed a hack
	that had been put in to ensure that the "connection dropped" timestamp
	was at least as late as the last message in the log (this had 
	caused problems in translating some old files but I don't remember how)

2001-06-26  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_3Space.C : Massive cleanup
	* vrpn_3Space.h : Massive cleanup
	* vrpn_Analog.C : Massive cleanup
	* vrpn_Analog.h : Massive cleanup
	* vrpn_Analog_5dt.C : Massive cleanup
	* vrpn_Analog_Radamec_SPI.C : Massive cleanup
	* vrpn_Analog_Radamec_SPI.h : Massive cleanup
	* vrpn_BaseClass.h : Massive cleanup
	* vrpn_Button.C : Massive cleanup
	* vrpn_Button.h : Massive cleanup
	* vrpn_CerealBox.C : Massive cleanup
	* vrpn_CerealBox.h : Massive cleanup
	* vrpn_Clock.C : Massive cleanup
	* vrpn_Connection.C : Massive cleanup
	* vrpn_Connection.h : Massive cleanup
	* vrpn_Dial.h : Massive cleanup
	* vrpn_Dyna.C : Massive cleanup
	* vrpn_Dyna.h : Massive cleanup
	* vrpn_Flock.C : Massive cleanup
	* vrpn_Flock.h : Massive cleanup
	* vrpn_Flock_Parallel.C : Massive cleanup
	* vrpn_Flock_Parallel.h : Massive cleanup
	* vrpn_ForceDevice.C : Massive cleanup
	* vrpn_ImmersionBox.C : Massive cleanup
	* vrpn_ImmersionBox.h : Massive cleanup
	* vrpn_Joylin.C : Massive cleanup
	* vrpn_Magellan.C : Massive cleanup
	* vrpn_Mutex.C : Massive cleanup
	* vrpn_Serial.C : Massive cleanup
	* vrpn_Sound.C : Massive cleanup
	* vrpn_Tng3.C : Massive cleanup
	* vrpn_Tng3.h : Massive cleanup
	* vrpn_Tracker.C : Massive cleanup
	* vrpn_Tracker.h : Massive cleanup
	* vrpn_Tracker_Fastrak.C : Massive cleanup
	* vrpn_Tracker_Fastrak.h : Massive cleanup
	* vrpn_Types.h : Massive cleanup
	* vrpn_UNC_Joystick.C : Massive cleanup
	* vrpn_Wanda.C : Massive cleanup
	* vrpn_raw_sgibox.C : Massive cleanup

2001-06-05  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Connection.C : Bumped minor version number
	* vrpn_Shared.C : Put back Perf code, guarded by VRPN_UNSAFE_WINDOWS_CLOCK

2001-06-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Flock.C : Modified to print an error when trying to open a Flock
		that has a transmitter other than as unit 1.  The code doesn't
		work in this case, and it is good to tell the user what's up.

2001-06-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Shared.C (gettimeofday) : Modified the PC version to always use the
		_ftime() call, rather than attempting to use the performance counter.
		This means only 6ms accuracy on timing, but the other code was fragile
		and didn't work across operating systems (98, NT, 2000).

2001-06-02  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Button.h (vrpn_Button_Parallel) : Moving default parameter into
		header file and out of C file
	* vrpn_Button.C (vrpn_Button_Parallel) : same

2001-06-02  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_3Space.C (mainloop) : Made it so that it tries to read a record
		before checking for timeout (to prevent infinite resets when there
		are two trackers or other devices running on same server).
	* vrpn_Analog_5dt.C (mainloop) : Same
	* vrpn_Analog_Radamec_SPI.C (mainloop) : Same
	* vrpn_CerealBox.C (mainloop) : Same
	* vrpn_Analog_.C (mainloop) : Same
	* vrpn_Dyna.C (mainloop) : Same
	* vrpn_Flock.C (mainloop) : Same
	* vrpn_Flock_Parallel.C (mainloop) : Same
	* vrpn_ImmersionBox.C (mainloop) : Same
	* vrpn_Tracker_Fastrak.C (mainloop) : Same
	* vrpn_Button.h : Added entry to read from the buttons on a mouse that
		is treated as a serial device.
	* vrpn_Button.C : Same
	* vrpn_Tng3.h : Code to run a "Totally Neat Gadget", or at least its
		buttons.  Driver by Rob King at NRL.
	* vrpn_Tng3.C : Same
	* Makefile : Modified to load the Tng drivers into servers.

2001-06-01  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Analog_5dt.h : Driver for 5DT data glove (5 fingers, roll, pitch)
	* vrpn_Analog_5dt.C : Same
	* vrpn_Button.h : Added Bel Elgin's changes from 3rdTech to allow the
		hex specification of the parallel port address as a 4th argument.
	* vrpn_Button.C : Same plus ability to set an output bit on the port to
		1 to driver power to an external button device.
	* vrpn_Joylin.h : Driver for PC joysticks under Linux, written by Harald
		Barth.
	* vrpn_Joylin.C : Same

2001-06-01  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Connection.h (vrpn_Endpoint) : Adds d_tcp_only member, which tells
		the endpoint not to try and communicate with its peer using any
		other mechanism.

	* vrpn_Connection.C : Removed commented-out things left hanging around.
		(vrpn_Connection) : Made parsing of "tcp:" names more robust and
			made it so that an endpoint created using the "tcp:" URL is
			told not to communicate except via TCP.
		(header_len) : Const helper routine for the following
		(vrpn_copy_machine_name) : Uses more-robust helper routine
		(vrpn_get_port_number) : Same
		(vrpn_copy_rsh_program) : Same
		(vrpn_copy_rsh_arguments) : Same
		(server_check_for_incoming_connections) : Tells the endpoint not
			to open a UDP link if it was created on a server that was
			connected to with a TCP connection (presumably going through
			a firewall or NAT).
		(finish_new_connection_setup) : Doesn't open UDP port if it is a
			TCP-only endpoint.  Otherwise, it does.
		(connect_udp_to) : Same.

2001-05-01  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_Mutex.C (vrpn_Mutex_Remote::requestIndex): now packs the IP
	address and process id into this message
	(vrpn_Mutex_Remote::handle_initialize): checks to see if the
	index message is tagged with the same IP address and process id that
	was included in the requestIndex message; this also handles the case
	when other clients that may use an older version of the code
	do not provide this unique identifier and ignores index assignments
	designated for those clients
	(vrpn_Mutex_Server::handle_requestIndex): now packs whatever was
	in the requestIndex message from the client so it gets echoed back
	and the client can figure out which index belongs to it
	(presumably the client put some unique identifier into the
	requestIndex message)

2001-04-30  Tom Hudson  <hudson@cs.unc.edu>

	* vrpn_Mutex.C (handle_gotConnection) : Fix logic error to request
	a new ID if one hasn't been set already.  Has known failure modes
	(?), but fewer than when this was incorrect.

2001-04-30  Tom Hudson  <hudson@cs.unc.edu>

	* vrpn_Tracker_AnalogFly.C (d_reportChanges) : new member variable
	recording whether we're reporting at the full update_rate or at the
	rate at which changes actually happen
	(shouldReport) : new function
	(mainloop) : call shouldReport()

2001-04-24  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_Mutex.hC : added a new message to let the client request
		the initialization message instead of having the server
		send this automatically on getting a connection - the problem
		with the old method is that if the connection was opened before
		creating the vrpn_Mutex_Remote then the message could be
		received before the vrpn_Mutex_Remote's callback was registered
		Now, when creating a vrpn_Mutex_Remote with an already-
		connected vrpn_Connection, a request for initialization is sent
		immediately. Otherwise, the vrpn_Mutex_Remote requests
		initialization when its got_connection callback is 
		triggered.
	* vrpn_Tracker.C : changed checks for sensor > TRACKER_MAX_SENSOR_LIST
		to sensor >= TRACKER_MAX_SENSOR_LIST because a sensor index
		equal to TRACKER_MAX_SENSOR_LIST is also illegal

2001-03-25  Aron Helser  <helser@cs.unc.edu>

	* vrpn_Analog.C : Tweak of message types to make them more uniform
	an easy to automatically generate. Class name is first, followed
	by space, followed by message type.
	* vrpn_BaseClass.C : same
	* vrpn_Button.C : same
	* vrpn_Clock.C : same
	* vrpn_Connection.C : same
	* vrpn_Dial.C : same
	* vrpn_FileConnection.C : same
	* vrpn_FileController.C : same
	* vrpn_ForceDevice.C : same
	* vrpn_ForwarderController.C : same
	* vrpn_Mutex.C : same
	* vrpn_RedundantTransmission.C : same
	* vrpn_Router.C : same
	* vrpn_SharedObject.C : same
	* vrpn_Sound.C : same
	* vrpn_Tracker.C : same

2001-03-25  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Analog.C : Removed spaces and other characters not available in
		C variable names from the message type and sender descriptions
		so that Aron's Perl script could be used to generate all of
		these objects (or a program to print them).
	* vrpn_BaseClass.C : same
	* vrpn_Button.C : same
	* vrpn_Clock.C : same
	* vrpn_Connection.C : same
	* vrpn_Dial.C : same
	* vrpn_FileConnection.C : same
	* vrpn_FileController.C : same
	* vrpn_ForceDevice.C : same
	* vrpn_ForwarderController.C : same
	* vrpn_Mutex.C : same
	* vrpn_RedundantTransmission.C : same
	* vrpn_Router.C : same
	* vrpn_SharedObject.C : same
	* vrpn_Sound.C : same
	* vrpn_Tracker.C : same

2001-03-01  Aron Helser  <helser@cs.unc.edu>

	* vrpn_BaseClass.h: Fixed D'Oxygen comments.

2001-02-15  Tom Hudson <hudson@cs.unc.edu>

	* vrpn_Connection.h (vrpn_Connection::vrpn_Connection) : change
	logfile arguments for both server and client constructors.
	(vrpn_Synchronized_Connection::vrpn_Synchronized_Connection) : same.
	(vrpn_get_connection_by_name) : same.
	(vrpn_Endpoint) : replace remote_log_name with two names, one for
        incoming and one for outgoing;  replace d_log with two vrpn_Logs,
	add d_ convention to remote_log_mode.
	(vrpn_Endpoint::setLogNames) : new function.
	(vrpn_Endpoint::openLogs) : same.
	* vrpn_Connection.C (vrpn_Connection::vrpn_Connection) : handle
        changed method of log specification.
	(vrpn_Synchronized_Connection::vrpn_Synchronized_Connection) : pass
        changed arguments to Connection constructor.
	(vrpn_get_connection_by_nbame) : same.
	(vrpn_Endpoint::vrpn_Endpoint) : initialize both log names.
	(vrpn_Endpoint::init) : create both logs.
	(vrpn_Endpoint::pack_log_description) : pass both log names.
	(vrpn_Endpoint::handle_log_message) : unpack both log names.
	* vrpn_FileConnection.h (vrpn_File_Connection::vrpn_File_Connection) :
        change logfile arguments for constructor.
	* vrpn_FileConnection.C (vrpn_File_Connection::vrpn_File_Connection) :
	same.

2001-02-12  Russell M. Taylor II <taylorr@cs.unc.edu>
	* vrpn_shared.C : vrpn_unbuffer ( ) {All of them} Modified to handle
	conversions from unaligned buffers.  This was causing problems with
	the code being used to read from serial buffers in tracker drivers.
	I give up on trying to save the extra copy.

2001-02-09  Kwan Torrich Skinner <skinner@cs.unc.edu>
	* vrpn.dsp : removes references to vrpn_DelayedConnection.[C,h]

2001-02-07  Kwan Torrich Skinner <skinner@cs.unc.edu>
	* vrpn_Connection.C : increased minor version number.
	* Changelog : fixed Tom's (and my own) dates to be 2001 and not y2k.

2001-02-05 Tom Hudson  <hudson@cs.unc.edu>

        (vrpn_Connection::server_check_for_incoming_connections) :
        Change one type to compile on the PC

2001-02-05 Tom Hudson  <hudson@cs.unc.edu>

	* vrpn_Connection.h: add vrpn_Connection::listen_tcp_sock
	vrpn_Connection.C
	(open_tcp_socket) : Add portno argument just like open_udp_socket;
	default to NULL
	(vrpn_Endpoint::connect_tcp_to) : Refactor into two functions
        (vrpn_Connection::server_check_for_incoming_connections) :
        Add check for TCP connections
	(vrpn_Connection server constructor) : Add initialization,
        opening, and listen() call for tcp socket
	(vrpn_Connection client constructor) : Check for "tcp:"
        station name; if found, initiate a TCP connection instead
        of sending UDP message asking the server to initiate on

2001-01-07  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* vrpn_MTd.dsp: added vrpn_RedundantTransmission to the project
	file so topo will compile.

2000-12-6  Tom Hudson  <hudson@cs.unc.edu>

	* Makefile:  remove vrpn_DelayedConnection.C, vrpn_DelayedConnection.h

	* vrpn_RedundantTransmission.C
	(vrpn_RedundantTransmission::mainloop) : rewrite deletion routine
	so it doesn't occasionally crash for no apparent reason on PCs

	(vrpn_RedundantTransmission::pack_message) : add new parameter;
	handle special cases and boundary conditions better
	* vrpn_Tracker.C (vrpn_Tracker_NULL::mainloop) : pass new parameter
	to vrpn_RedundantTransmission::pack_message

	(vrpn_RedundantTransmission) : new data member d_isEnabled
	(vrpn_RedundantTransmission::isEnabled) : new function
	(vrpn_RedundantTransmission::enable) : same
	(vrpn_RedundantController_Protocol::encode_enable) : same
	(vrpn_RedundantController_Protocol::decode_enable) : same
	(vrpn_RedundantController::handle_enable) : same
	(vrpn_RedundantRemote::enable) : same
	(vrpn_RedundantController constructor) : add handler registration

	(vrpn_RedundantReceiver) : new class

2000-11-13  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Flock_Parallel.C (mainloop) : Made the code close and then
		reopen the serial ports (like it used to do before I turned
		it off because of a buggy Linux kernel).

2000-11-03  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Shared.C (gettimeofday) : Turned off hi-perf clock for Win98
		(vrpn_AdjustFrequency) : Removed buggy clock-check code

2000-11-01  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_FileConnection.C : Fixed parsing of file://.
	* vrpn_Connection.C : Removed more of the WINDOWS_GETHOSTBYNAME hack

2000-11-01  Aron Helser  <helser@cs.unc.edu>

	* vrpn_Connection.Ch (vrpn_Log::close): calls saveLogSoFar then
	closes file. 
	(vrpn_Log::saveLogSoFar): Incremental save of log file whenever
	called. 
	(vrpn_Connection::save_log_so_far): calls vrpn_Log::saveLogSoFar
	on all open endpoints. 

2000-10-20  Aron Helser  <helser@cs.unc.edu>

	* vrpn_Connection.C (connect_tcp_to): Don't call gethostbyname if
	machine name provided is an IP number. 
	(vrpn_connect_udp_port): same
	(connect_tcp_to): same
	(connect_udp_to): comment out, replaced with call to
	vrpn_connect_udp_port

	* vrpn_Mutex.C (getmyIP): Don't call gethostbyname if machine name
	provided is an IP number. Fixes byte-order problem with return
	value on win32.
	
	* vrpn_BaseClass.C (~vrpn_TextPrinter): Fix compiler warnings.

2000-10-18  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Serial.C (vrpn_drain_output_buffer) :
		Called drain function, rather than flush.

2000-10-18  Tom Hudson  <hudson@cs.unc.edu>

	* vrpn_Connection.C (vrpn_Connection) : add data members
        d_endpointAllocator, d_updateEndpoint
	(vrpn_Connection client constructor) : add endpoint allocator
	as extra argument, call (*d_endpointAllocator) & set d_updateEndpoint
	instead of calling allocateEndpoint()
	(vrpn_Connection server constructor) : same
	(vrpn_Synchronized_Connection client constructor) : add endpoint
	allocator as extra argument
	(vrpn_Synchronized_Connection server constructor) : same
	(vrpn_Connection::updateEndpoints) : new function
	(vrpn_Connection::allocateEndpoint) : change from virtual to static
        (vrpn_Connection::connect_to_client) : replace call to
        allocateEndpoint() with (*d_endpointAllocator), set d_updateEndpoint
	(vrpn_Connection::server_check_for_incoming_connections) : same
	(vrpn_Connection::mainloop) : call updateEndpoints() if
	d_updateEndpoint is true
	(vrpn_Endpoint::dispatch) : make virtual

	* vrpn_DelayedConnection.C (vrpn_DelayedEndpoint) : new data
	members d_delayListEnd, d_delayAllTypes, d_typeIsDelayed
	(vrpn_DelayedConnection) : new data members d_delayAllTypes,
	d_typeIsDelayed
	(vrpn_DelayedEndpoint constructor) : remove timeval parameter,
	initialize d_typeIsDelayed
	(vrpn_DelayedEndpoint::delayAllTypes) : new function
	(vrpn_DelayedEndpoint::delayType) : same
	(vrpn_DelayedEndpoint::enqueue) : same
	(vrpn_DelayedEndpoint::updateEndpoints) : same
	(vrpn_DelayedEndpoint::dispatch) : don't delay system messages;
	TCP/UDP connections will timeout otherwise
	(vrpn_DelayedConnection constructor) : initialize d_typeIsDelayed
	(vrpn_DelayedConnection::delayAllTypes) : new function
	(vrpn_DelayedConnection::delayType) : same
	(vrpn_RelativeDelayEndpoint) : new class
	(vrpn_RelativeDelayConnection) : new class

	* vrpn_RedundantTransmission.C 
	(vrpn_RedundantTransmission::mainloop) : detect & clean-up after
	error states

2000-10-16  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Connection.C : Deleted commented-out code.

2000-10-16  Tom Hudson  <hudson@cs.unc.edu>

	* vrpn_RedundantTransmission.C (defaultInterval) : new function
        (defaultRetransmissions) : same

2000-10-11  Tom Hudson  <hudson@cs.unc.edu>

	* vrpn_Connection.C (vrpn_TranslationTable::addRemoteEntry) :
        add details to error output

	* vrpn_Tracker.C (vrpn_Tracker_NULL::mainloop) : add support for
        vrpn_RedundantTransmission
        (vrpn_Tracker_NULL::setRedundantTransmission) : new function
        * vrpn_RedundantTransmission.h : new file
        * vrpn_RedundantTransmission.C : new file
        
2000-10-10  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_FileConnection.hC (vrpn_File_Connection::get_filename) :
	new function that lets you easily find out what the name of the
	file was that vrpn opened (you could also do this using
	vrpn_copy_file_name with the name passed in originally)

2000-10-09  Aron Helser  <helser@cs.unc.edu>

	* vrpn_Connection.C (server_check_for_incoming_connections): A
	server used to get NIC for tcp connection from information in the
	UDP message sent by the client. Instead, use the NIC the UDP
	message came in on, ignoring NIC information in the UDP
	message. Allows us to handle multiple NICs more gracefully,
	because client can't easily discover the right NIC to put in the
	message.
	Other comment and verbose printout changes.

2000-10-08  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_FileConnection.C (vrpn_File_Connection::vrpn_File_Connection):
        sets d_start_time to be the first time after playing to the first
        user message to avoid problems with log files that have system
        messages with messed up timestamps

2000-10-05  Sang-Uok Kum  <kumsu@cs.unc.edu>

	* vrpn_Shared.h: Fixed a mistake which made it not work in VC++. 
	sleep is still not defined in VC++.

2000-10-04  Sang-Uok Kum  <kumsu@cs.unc.edu>

	* vrpn_Button.C : Include files and #ifdefs changed so in cygwin v1.1
	it always uses unix sockets instead of window sockets. (The vrpn libary
	compiled but gave run time errors.) This was only tested for vrpn 
	client.
	* vrpn_Clock.C : same
	* vrpn_Connection.C : same
	* vrpn_FileConnection.C : same
	* vrpn_FileController.C : same
	* vrpn_ForwarderController.C : same
	* vrpn_Serial.C : same
	* vrpn_Shared.C : same
	* vrpn_Shared.h : same
	
2000-10-02  Tom Hudson  <hudson@cs.unc.edu>

	* vrpn_SharedObject.h :  Uncommented initial #include of
        vrpn_Shared.h, which is necessary for compiling under
        Cygwin 1.1;  code still compiles under VC++ and Cygwin 1.0

2000-10-02  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_Shared.C (vrpn_buffer, vrpn_unbuffer) : added these functions
	for vrpn_int16 and vrpn_uint16 - also, had to remove the one for
	vrpn_bool because a vrpn_bool is a vrpn_int16

2000-09-26  Tom Hudson  <hudson@cs.unc.edu>

        * Makefile : now that we're using makedepend, got rid of rebuild
        of entire library whenever any header file changed.

        * vrpn_DelayedConnection.C
        (vrpn_DelayedEndpoint::send_pending_reports) : implemented
        (vrpn_DelayedEndpoint::dispatch) : same
        (vrpn_DelayedEndpoint::dispatchPending) : same
        (vrpn_DelayedEndpoint::setDelay) : new function
        (vrpn_DelayedEndpoint::deletePending) : same
        (vrpn_DelayedConnection::setDelay) : same

2000-09-25  Tom Hudson  <hudson@cs.unc.edu>

	* connection : new directory, to be populated later today

	* vrpn_Connection.C (vrpn_Endpoint::dispatch) : new function
        (vrpn_Connection::allocateEndpoint) : new function
        (vrpn_Endpoint::getOneTCPMessage) : call dispatch()
        (vrpn_Endpoint::getOneUDPMessage) : same
        (vrpn_Connection::connectToClient) : call allocateEndpoint()
        (vrpn_Connection::server_check_for_incoming_connections) : same
        (vrpn_Connection::server constuctor) : same
        (vrpn_Connection::client constuctor) : same

        * vrpn_DelayedConnection.C : new file

2000-09-22  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_Connection.C (vrpn_Log::lastLogTime) : new function to 
	return the last timestamp for a logged message
	* vrpn_Connection.C (vrpn_Endpoint::drop_connection) : Since we
	read the actual time here to log dropped connection message, this
        was setting back the time for programs that used the logging
        mechanism for translation of old data into new log files. Now, in the
	case of logging and when the current time is less than the last log
        time, this function records the dropped_connection message with 
        the previous log time instead
	* vrpn_Connection.C (vrpn_Synchronized_Connection::client constructor):
	this function now calls pack_sender_description for vrpn_CONTROL and
        pack_type_description for vrpn_got_connection, vrpn_dropped_connection,
        vrpn_got_first_connection, vrpn_dropped_last_connection so that they
	will get put into a log file even if the endpoint is not connected
	(needed for translation) - (At least I think this is why they aren't
	getting put into the log file)

2000-09-21  Tom Hudson  <hudson@cs.unc.edu>

        (vrpn_SharedObject::handle_gotConnection) : small fix for
        non-serialized use

2000-09-18  Tom Hudson  <hudson@cs.unc.edu>

        * vrpn_SharedObject.C:
        (class vrpn_SharedObject)
        d_isNegotiatingSerializer : new data member
        (vrpn_SharedObject::becomeSerializer) : test & set
        d_isNegotiatingSerializer
        (vrpn_SharedObject::handle_requestSerializer) : same
        (vrpn_SharedObject::handle_grantSerializer) : clear
        d_isNegotiatingSerializer
        (vrpn_SharedObject::handle_assumeSerializer) : same
        (vrpn_SharedObject::postBindConnection) : check for NULL connection,
        moved code from serverPostBindConnection
        (vrpn_SharedObject::serverPostBindConnection) : same
        (vrpn_SharedObject::handle_gotConnection) : generalized,
        renamed from handle_gotConnectionToRemote


2000-09-17  Tom Hudson  <hudson@cs.unc.edu>

        * vrpn_SharedObject.C:
        (class vrpn_SharedObject)
        d_serverId, d_remoteId, d_peerId, d_update_type, d_lamportUpdate_type :
        new data members
        d_updateFromServer_type, d_updateFromRemote_type, d_myUpdate_type,
        d_updateFromServerLamport_type, d_updateFromRemoteLamport_type :
        remove
        (vrpn_SharedObject::postBindCleanup) : new function
        (vrpn_SharedObject::serverPostBindCleanup) : same
        (vrpn_SharedObject::remotePostBindCleanup) : same
        (vrpn_SharedObject::sendUpdate) : same
        (vrpn_SharedObject::handleUpdate) : same
        (vrpn_SharedObject::handle_gotConnectionToRemote) : same
        (vrpn_SharedObject::handle_update) : same
        (vrpn_SharedObject::becomeSerializer) : simplify
        (vrpn_SharedObject::handle_requestSerializer) : simplify
        (vrpn_SharedObject::handle_grantSerializer) : simplify
        (vrpn_SharedObject::handle_assumeSerializer) : simplify
        (vrpn_Shared_int32::sendUpdate) : remove first parameter
        (vrpn_Shared_float64::sendUpdate) : same
        (vrpn_Shared_String::sendUpdate) : same
        (vrpn_Shared_int32::handleUpdate) : new function
        (vrpn_Shared_float64::handleUpdate) : same
        (vrpn_Shared_String::handleUpdate) : same

2000-09-15  Tom Hudson  <hudson@cs.unc.edu>

	* vrpn_LamportClock.h : changed <> on include to ""

2000-09-12  Tom Hudson  <hudson@cs.unc.edu>

        * vrpn_BaseClass.h : made some of the comments 80-column correct
        so I could read them.

        * vrpn_SharedObject.h: (becomeSerializer) : new function
        d_requestSerializer_type, d_grantSerializer_type,
        d_assumeSerializer_type : new data members
        d_queueSets : new data member (probably unnecessary)
        d_becomeSerializer_type : removed old data member
        (handle_requestSerializer) : new function
        (handle_grantSerializer) : renamed from handle_becomeSerializer
        (handle_assumeSerializer) : new function
        (vrpn_SerializerPolicy) : renamed vrpn_DENY to vrpn_DENY_REMOTE,
        added vrpn_DENY_LOCAL

        * vrpn_SharedObject.C: (vrpn_SharedObject constructor) :
        default values for new data members, d_lClock.
        (vrpn_SharedObject::becomeSerializer) : new function
        (vrpn_SharedObject::handle_requestSerializer) : new function
        (vrpn_SharedObject::handle_grantSerializer) :
        renamed from handle_becomeSerializer
        (vrpn_SharedObject::handle_assumeSerializer) : new function
        (vrpn_Shared_int32_Server::bindConnection) : added registration
        of handler for requestSerializer
        (vrpn_Shared_float64_Server::bindConnection) : added registration
        of handler for requestSerializer
        (vrpn_Shared_String_Server::bindConnection) : added registration
        of handler for requestSerializer
	(vrpn_Shared_int32::shouldAcceptUpdate) : added handling for
        vrpn_DENY_LOCAL
	(vrpn_Shared_float64::shouldAcceptUpdate) : same
	(vrpn_Shared_String::shouldAcceptUpdate) : same


2000-09-11  Adam Seeger  <seeger@cs.unc.edu>

        * vrpn_FileConnection.C (vrpn_File_Connection::reset) : 
	Added call to d_endpoints[0]->drop_connection() to clear all state for
	replaying the file from the beginning.
        * vrpn_FileConnection.C (vrpn_File_Connection::mainloop) :
	returns -1 if there is an error reading from the file

2000-09-11  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_Mutex.C (vrpn_Mutex_Server::~vrpn_Mutex_Server) : added
	unregister messages to correspond to register messages in the
	constructor (should be fixed using vrpn_BaseClass later)
	* vrpn_Mutex.C (vrpn_Mutex_Remote::~vrpn_Mutex_Remote) : added
        unregister messages to correspond to register messages in the
        constructor (should be fixed using vrpn_BaseClass later)
	* vrpn_FileConnection.C (vrpn_File_Connection::constructor) :
	took out code that set the first message to the first
	user message because when we later get a message that clears
	the translation table there is no way to rewind and rebuild
	the translation table because the initial system messages
	don't get replayed (left in the part that actually skips to the
	first user message though because this is apparently useful in
	order to avoid timing problems)
	* vrpn_FileConnection.C (vrpn_File_Connection::reset) :
	added code from constructor to skip to the first user message

2000-09-07  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_Connection.C (vrpn_TranslationTable::clear) : changed this
	to do delete [] instead of delete on d_entry[i].name since a
	cName (its type) is a typedef for an array

2000-09-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Magellan.C (vrpn_write_slowly) : Added parameter for how long
		wait.
		(get_report) : Returns 1 if a full report found
		(mainloop): Retries reading when a full report is found
			so that the buffer is cleared of all reports

	* vrpn_Router.C : #include string.h to compile on Linux

2000-09-01  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_Connection.h (check_vrpn_file_cookie) : Now this will work
	if the version is >= 4.0 and <= the current version

2000-09-01  Adam Seeger  <seeger@cs.unc.edu>

        * vrpn_Connection.h (check_vrpn_file_cookie) : This only worked if
	the version was 4.0, now it works if the version is the current one
	or less

2000-08-31  Tom Hudson  <hudson@cs.unc.edu>

	* vrpn_Connection.C (vrpn_TranslationTable):  Removed a lot of
        #if 1/#if 0 clauses that have become set.
	* vrpn_Connection.C (vrpn_TranslationTable::addLocalID):  Added
        a guard to strcmp to make sure we weren't comparing against NULL.

2000-08-28  Adam Seeger  <seeger@cs.unc.edu>

        * vrpn_Router.[hC] (vrpn_Router, ~vrpn_Router) : Made it so that
	the big arrays in this class get dynamically allocated instead
	of statically allocated so we don't have to use the huge_objects
	flag with Visual C++

2000-08-28  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* Makefile : Added Brown patches to compile under AIX.
		Cleaned up RANLIB and some dependencies.

	* vrpn_Shared.h : Added INVALID_SOCKET defs for Win32.

	* vrpn_Types.h : Added AIX definitions.

2000-08-28  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Wanda.h : New file
	* vrpn_Wanda.C : New file
	* Makefile : Add Wanda to server library

2000-08-27  Jeffrey Juliano  <juliano@cs.unc.edu>

	* .cvsignore: Add sgi_irix.n32.mips3 to ignore list.

2000-08-24  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_BaseClass.C (~vrpn_TextPrinter) : Hack to remove segfaults
	* vrpn_Router.C : New file
	* vrpn_Router.h : New file
	* Makefile : Added vrpn_Router compilation

2000-08-22  Kwan Skinner  <skinner@cs.unc.edu>

	* vrpn_Connection.C (check_vrpn_file_cookie) : New function
	* vrpn_Connection.h (check_vrpn_file_cookie) : New function
	* vrpn_FileConnection.C (read_cookie) : Now calls check_vrpn_file_cookie

2000-08-21  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Connection.C (connect_to_client) : Bug fix
		Remove parameter that is now obsolete.

2000-08-15  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Mutex.C (vrpn_Mutex_Remote) : Type cast

2000-08-14  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Analog_Radamec.C (int_to_pan) : Fix negative rotations

2000-08-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Analog_Radamec.C (send_command) : Removed slow writes
		(int_to_pan) : Conversion fixed
		(reset) : Chopped out large parts that didn't work but should
		(get_report) : Set to ignore commands in case they are sent

	* vrpn_Tracker_AnalogFly.h : Added "absolute" and offset
	* vrpn_Tracker_AnalogFly.C : Added "absolute" and offset

2000-08-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Analog_Radamec_SPI.C : Changed some warnings into errors
		(mainloop) : Added a watchdog timer

	* vrpn_Connection.C (vrpn_Log::setCompoundName): added 'const'

	* vrpn_Serial.C (vrpn_open_commport): Adds input baud to SGI code

	* vrpn_Tracker_Fastrak.C (get_report): Flushes buffer when resynching

	* vrpn_ImmersionBox.h : New file

	* vrpn_ImmersionBox.C : New file

2000-08-10  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn.dsp: Adds a driver for the Radamec Serial Position Interface
	(Camera tracker)

	* vrpn.dsw: same
	* vrpn_Analog_Radamec_SPI.h: same
	* vrpn_Analog_Radamec_SPI.C: same

	* vrpn_Serial.h (vrpn_open_commport): Adds bit length and parity to
	the optional parameters to the serial-port open.

	* vrpn_Serial.C (vrpn_open_commport): same
	* vrpn_Analog.C (vrpn_Serial_Analog::vrpn_Serial_Analog): same
	* vrpn_Analog.h (vrpn_Serial_Analog::vrpn_Serial_Analog): same

	* vrpn_Tracker.C: Modified the packing code to use vrpn_buffer()
	and vrpn_unbufer().  Removed the redundant change handlers for all
	sensors, by replacing them with ones that have optional parameters.

	* vrpn_Tracker.h: same

	* vrpn_AnalogFly.C (vrpn_AnalogFly::vrpn_AnalogFly): Sets the reset
	button to NULL by default so that the code won't blow up if you don't
	have one.
