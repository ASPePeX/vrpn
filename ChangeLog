2000-09-26  Tom Hudson  <hudson@cs.unc.edu>

        * Makefile : now that we're using makedepend, got rid of rebuild
        of entire library whenever any header file changed.

        * vrpn_DelayedConnection.C
        (vrpn_DelayedEndpoint::send_pending_reports) : implemented
        (vrpn_DelayedEndpoint::dispatch) : same
        (vrpn_DelayedEndpoint::dispatchPending) : same
        (vrpn_DelayedEndpoint::setDelay) : new function
        (vrpn_DelayedEndpoint::deletePending) : same
        (vrpn_DelayedConnection::setDelay) : same

2000-09-25  Tom Hudson  <hudson@cs.unc.edu>

	* connection : new directory, to be populated later today

	* vrpn_Connection.C (vrpn_Endpoint::dispatch) : new function
        (vrpn_Connection::allocateEndpoint) : new function
        (vrpn_Endpoint::getOneTCPMessage) : call dispatch()
        (vrpn_Endpoint::getOneUDPMessage) : same
        (vrpn_Connection::connectToClient) : call allocateEndpoint()
        (vrpn_Connection::server_check_for_incoming_connections) : same
        (vrpn_Connection::server constuctor) : same
        (vrpn_Connection::client constuctor) : same

        * vrpn_DelayedConnection.C : new file


2000-09-22  Adam Seeger  <seeger@cs.unc.edu>

        * vrpn_Connection.C (vrpn_Log::lastLogTime) : new function to 
	return the last timestamp for a logged message
        * vrpn_Connection.C (vrpn_Endpoint::drop_connection) : Since we
	read the actual time here to log dropped connection message, this
        was setting back the time for programs that used the logging
        mechanism for translation of old data into new log files. Now, in the
	case of logging and when the current time is less than the last log
        time, this function records the dropped_connection message with 
        the previous log time instead
        * vrpn_Connection.C (vrpn_Synchronized_Connection::client constructor):
	this function now calls pack_sender_description for vrpn_CONTROL and
        pack_type_description for vrpn_got_connection, vrpn_dropped_connection,
        vrpn_got_first_connection, vrpn_dropped_last_connection so that they
	will get put into a log file even if the endpoint is not connected
	(needed for translation) - (At least I think this is why they aren't
	getting put into the log file)

2000-09-21  Tom Hudson  <hudson@cs.unc.edu>

        (vrpn_SharedObject::handle_gotConnection) : small fix for
        non-serialized use

2000-09-18  Tom Hudson  <hudson@cs.unc.edu>

        * vrpn_SharedObject.C:
        (class vrpn_SharedObject)
        d_isNegotiatingSerializer : new data member
        (vrpn_SharedObject::becomeSerializer) : test & set
        d_isNegotiatingSerializer
        (vrpn_SharedObject::handle_requestSerializer) : same
        (vrpn_SharedObject::handle_grantSerializer) : clear
        d_isNegotiatingSerializer
        (vrpn_SharedObject::handle_assumeSerializer) : same
        (vrpn_SharedObject::postBindConnection) : check for NULL connection,
        moved code from serverPostBindConnection
        (vrpn_SharedObject::serverPostBindConnection) : same
        (vrpn_SharedObject::handle_gotConnection) : generalized,
        renamed from handle_gotConnectionToRemote


2000-09-17  Tom Hudson  <hudson@cs.unc.edu>

        * vrpn_SharedObject.C:
        (class vrpn_SharedObject)
        d_serverId, d_remoteId, d_peerId, d_update_type, d_lamportUpdate_type :
        new data members
        d_updateFromServer_type, d_updateFromRemote_type, d_myUpdate_type,
        d_updateFromServerLamport_type, d_updateFromRemoteLamport_type :
        remove
        (vrpn_SharedObject::postBindCleanup) : new function
        (vrpn_SharedObject::serverPostBindCleanup) : same
        (vrpn_SharedObject::remotePostBindCleanup) : same
        (vrpn_SharedObject::sendUpdate) : same
        (vrpn_SharedObject::handleUpdate) : same
        (vrpn_SharedObject::handle_gotConnectionToRemote) : same
        (vrpn_SharedObject::handle_update) : same
        (vrpn_SharedObject::becomeSerializer) : simplify
        (vrpn_SharedObject::handle_requestSerializer) : simplify
        (vrpn_SharedObject::handle_grantSerializer) : simplify
        (vrpn_SharedObject::handle_assumeSerializer) : simplify
        (vrpn_Shared_int32::sendUpdate) : remove first parameter
        (vrpn_Shared_float64::sendUpdate) : same
        (vrpn_Shared_String::sendUpdate) : same
        (vrpn_Shared_int32::handleUpdate) : new function
        (vrpn_Shared_float64::handleUpdate) : same
        (vrpn_Shared_String::handleUpdate) : same

2000-09-15  Tom Hudson  <hudson@cs.unc.edu>

	* vrpn_LamportClock.h : changed <> on include to ""

2000-09-12  Tom Hudson  <hudson@cs.unc.edu>

        * vrpn_BaseClass.h : made some of the comments 80-column correct
        so I could read them.

        * vrpn_SharedObject.h: (becomeSerializer) : new function
        d_requestSerializer_type, d_grantSerializer_type,
        d_assumeSerializer_type : new data members
        d_queueSets : new data member (probably unnecessary)
        d_becomeSerializer_type : removed old data member
        (handle_requestSerializer) : new function
        (handle_grantSerializer) : renamed from handle_becomeSerializer
        (handle_assumeSerializer) : new function
        (vrpn_SerializerPolicy) : renamed vrpn_DENY to vrpn_DENY_REMOTE,
        added vrpn_DENY_LOCAL

        * vrpn_SharedObject.C: (vrpn_SharedObject constructor) :
        default values for new data members, d_lClock.
        (vrpn_SharedObject::becomeSerializer) : new function
        (vrpn_SharedObject::handle_requestSerializer) : new function
        (vrpn_SharedObject::handle_grantSerializer) :
        renamed from handle_becomeSerializer
        (vrpn_SharedObject::handle_assumeSerializer) : new function
        (vrpn_Shared_int32_Server::bindConnection) : added registration
        of handler for requestSerializer
        (vrpn_Shared_float64_Server::bindConnection) : added registration
        of handler for requestSerializer
        (vrpn_Shared_String_Server::bindConnection) : added registration
        of handler for requestSerializer
	(vrpn_Shared_int32::shouldAcceptUpdate) : added handling for
        vrpn_DENY_LOCAL
	(vrpn_Shared_float64::shouldAcceptUpdate) : same
	(vrpn_Shared_String::shouldAcceptUpdate) : same


2000-09-11  Adam Seeger  <seeger@cs.unc.edu>

        * vrpn_FileConnection.C (vrpn_File_Connection::reset) : 
	Added call to d_endpoints[0]->drop_connection() to clear all state for
	replaying the file from the beginning.
        * vrpn_FileConnection.C (vrpn_File_Connection::mainloop) :
	returns -1 if there is an error reading from the file

2000-09-11  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_Mutex.C (vrpn_Mutex_Server::~vrpn_Mutex_Server) : added
	unregister messages to correspond to register messages in the
	constructor (should be fixed using vrpn_BaseClass later)
	* vrpn_Mutex.C (vrpn_Mutex_Remote::~vrpn_Mutex_Remote) : added
        unregister messages to correspond to register messages in the
        constructor (should be fixed using vrpn_BaseClass later)
	* vrpn_FileConnection.C (vrpn_File_Connection::constructor) :
	took out code that set the first message to the first
	user message because when we later get a message that clears
	the translation table there is no way to rewind and rebuild
	the translation table because the initial system messages
	don't get replayed (left in the part that actually skips to the
	first user message though because this is apparently useful in
	order to avoid timing problems)
	* vrpn_FileConnection.C (vrpn_File_Connection::reset) :
	added code from constructor to skip to the first user message

2000-09-07  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_Connection.C (vrpn_TranslationTable::clear) : changed this
	to do delete [] instead of delete on d_entry[i].name since a
	cName (its type) is a typedef for an array

2000-09-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Magellan.C (vrpn_write_slowly) : Added parameter for how long
		wait.
		(get_report) : Returns 1 if a full report found
		(mainloop): Retries reading when a full report is found
			so that the buffer is cleared of all reports

	* vrpn_Router.C : #include string.h to compile on Linux

2000-09-01  Adam Seeger  <seeger@cs.unc.edu>

	* vrpn_Connection.h (check_vrpn_file_cookie) : Now this will work
	if the version is >= 4.0 and <= the current version

2000-09-01  Adam Seeger  <seeger@cs.unc.edu>

        * vrpn_Connection.h (check_vrpn_file_cookie) : This only worked if
	the version was 4.0, now it works if the version is the current one
	or less

2000-08-31  Tom Hudson  <hudson@cs.unc.edu>

	* vrpn_Connection.C (vrpn_TranslationTable):  Removed a lot of
        #if 1/#if 0 clauses that have become set.
	* vrpn_Connection.C (vrpn_TranslationTable::addLocalID):  Added
        a guard to strcmp to make sure we weren't comparing against NULL.

2000-08-28  Adam Seeger  <seeger@cs.unc.edu>

        * vrpn_Router.[hC] (vrpn_Router, ~vrpn_Router) : Made it so that
	the big arrays in this class get dynamically allocated instead
	of statically allocated so we don't have to use the huge_objects
	flag with Visual C++

2000-08-28  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* Makefile : Added Brown patches to compile under AIX.
		Cleaned up RANLIB and some dependencies.

	* vrpn_Shared.h : Added INVALID_SOCKET defs for Win32.

	* vrpn_Types.h : Added AIX definitions.

2000-08-28  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Wanda.h : New file
	* vrpn_Wanda.C : New file
	* Makefile : Add Wanda to server library

2000-08-27  Jeffrey Juliano  <juliano@cs.unc.edu>

	* .cvsignore: Add sgi_irix.n32.mips3 to ignore list.

2000-08-24  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_BaseClass.C (~vrpn_TextPrinter) : Hack to remove segfaults
	* vrpn_Router.C : New file
	* vrpn_Router.h : New file
	* Makefile : Added vrpn_Router compilation

2000-08-22  Kwan Skinner  <skinner@cs.unc.edu>

	* vrpn_Connection.C (check_vrpn_file_cookie) : New function
	* vrpn_Connection.h (check_vrpn_file_cookie) : New function
	* vrpn_FileConnection.C (read_cookie) : Now calls check_vrpn_file_cookie

2000-08-21  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Connection.C (connect_to_client) : Bug fix
		Remove parameter that is now obsolete.

2000-08-15  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Mutex.C (vrpn_Mutex_Remote) : Type cast

2000-08-14  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Analog_Radamec.C (int_to_pan) : Fix negative rotations

2000-08-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Analog_Radamec.C (send_command) : Removed slow writes
		(int_to_pan) : Conversion fixed
		(reset) : Chopped out large parts that didn't work but should
		(get_report) : Set to ignore commands in case they are sent

	* vrpn_Tracker_AnalogFly.h : Added "absolute" and offset
	* vrpn_Tracker_AnalogFly.C : Added "absolute" and offset

2000-08-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn_Analog_Radamec_SPI.C : Changed some warnings into errors
		(mainloop) : Added a watchdog timer

	* vrpn_Connection.C (vrpn_Log::setCompoundName): added 'const'

	* vrpn_Serial.C (vrpn_open_commport): Adds input baud to SGI code

	* vrpn_Tracker_Fastrak.C (get_report): Flushes buffer when resynching

	* vrpn_ImmersionBox.h : New file

	* vrpn_ImmersionBox.C : New file

2000-08-10  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* vrpn.dsp: Adds a driver for the Radamec Serial Position Interface
	(Camera tracker)

	* vrpn.dsw: same
	* vrpn_Analog_Radamec_SPI.h: same
	* vrpn_Analog_Radamec_SPI.C: same

	* vrpn_Serial.h (vrpn_open_commport): Adds bit length and parity to
	the optional parameters to the serial-port open.

	* vrpn_Serial.C (vrpn_open_commport): same
	* vrpn_Analog.C (vrpn_Serial_Analog::vrpn_Serial_Analog): same
	* vrpn_Analog.h (vrpn_Serial_Analog::vrpn_Serial_Analog): same

	* vrpn_Tracker.C: Modified the packing code to use vrpn_buffer()
	and vrpn_unbufer().  Removed the redundant change handlers for all
	sensors, by replacing them with ones that have optional parameters.

	* vrpn_Tracker.h: same

	* vrpn_AnalogFly.C (vrpn_AnalogFly::vrpn_AnalogFly): Sets the reset
	button to NULL by default so that the code won't blow up if you don't
	have one.

