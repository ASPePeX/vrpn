# vrpn.cfg.SAMPLE for VRPN version 05.02

################################################################################
# AnalogFly Tracker. This is a tracker that is intended to be used on top of
# a joystick or motion tracker of some kind to turn it into a moving or flying
# device. It could be used on top of any analog device, in fact.
#   This device basically takes in analog signals and puts out transformation
# matrices. It should supercede the JoyFly tracker, since it is more general.
#   There are two kinds of JoyFly's: absolute ones and differential ones.  For
# absolute ones, the analog value is mapped directly to position or orientation
# on each axis.  For differential ones, the values are used to create a
# "change" matrix that is applied once per interval, accumulating changes as
# it goes; this allows the user to "fly" along by holding a joystick forward,
# for example.
#   One analog channel is associated with each axis (X, Y, Z) and rotation about
# each axis (RX, RY, RZ). For each axis, the value is converted to a position
# (meters) or speed (meters/second) for absolute trackers; or int an orientation
# (revolutions) or angular velocity (revolutions/second) by first subtracting
# an offset, then thresholding it to see if it is far enough from zero, then
# (if it is) scaling it and taking it to a power (to allow nonlinear speedup
# as the stick is pushed far from center).
#   A button can be associated with a reset function, which will take the
# device back to center (identity transformation). The device will also recenter
# when the first connection is made to the server it is running on. (Centering
# has no effect on absolute JoyFlys).
#   Any axis or the reset button can be disabled by setting the name of its
# associated device to the string "NULL".
#   Note that you could have multiple of these devices running simultaneously,
# each with a different name and interaction metaphor. The user could then
# connect to their favorite one. Arguments:
#	char  name_of_this_device[]
#	float update_rate_to_send_tracker_reports
#	char  "absolute" or "differential"
#	[six lines follow, one for X Y Z RX RY RZ, each with:
#		char	axis_name[]			(X Y Z RX RY RZ in that order)
#		char	name_of_analog_device[]		(start with * for local)
#		int	channel_of_analog_device
#		float offset
#		float	threshold
#		float	scale
#		float	power
#	]
#	[New line to describe reset button, with:
#		char	"RESET"
#		char	name_of_button_device[]		(start with * for local)
#		int	which_button_to_use
#	]

#vrpn_Tracker_AnalogFly	Tracker0	60.0	relative
#X	*CerealBox0	4	0.0	0.021	1.0	1.0
#Y	*CerealBox0	5	0.0	0.021	1.0	1.0
#Z	*CerealBox0	6	0.0	0.021	3.0	1.0
#RX	*CerealBox0	0	0.0	0.021	1.0	1.0
#RY	*CerealBox0	1	0.0	0.021	1.0	1.0
#RZ	*CerealBox0	2	0.0	0.021	3.0	1.0
#RESET	*CerealBox	3

vrpn_Tracker_AnalogFly	Tracker0	60.0	absolute
X	NULL		0	0.0	0.0	1.0	1.0
Y	NULL		0	0.0	0.0	1.0	1.0
Z	NULL		0	0.0	0.0	1.0	1.0
RX	*Radamec0	1	0.0	0.0	-0.0027777777	1.0
RY	NULL		0	0.0	0.0	1.0	1.0
RZ	*Radamec0	0	0.0	0.0	-0.0027777777	1.0
RESET	NULL	0

################################################################################
# Radamec Serial Position Interface analog. Camera tracker that attaches
# to a serial port on this machine. Note that for normal operation, 38400 is the
# only supported baud rate.
#
# Note that if you want to use the Radamec SPI as a tracking device, you will
# need to run a vrpn_Tracker_Jacobian device (hopefully to be implemented in
# vrpn 05.02) that listens to its analog outputs and converts them into tracker
# reports
#
# Arguments:
#	char	name_of_this_device[]
#	char	name_of_serial_port[]
#	int	baud_rate_of_serial_port

#vrpn_Radamec_SPI	Radamec0	COM1	38400
vrpn_Radamec_SPI	Radamec0	/dev/ttyS16	38400
